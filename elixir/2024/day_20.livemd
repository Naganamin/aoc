# Advent of Code 2024 - Day 20

```elixir
Mix.install([
  :kino_aoc
])
```

## Introduction

[2024 - Day 20](https://adventofcode.com/2024/day/20)

## Puzzle

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIyMCIsInNlc3Npb25fc2VjcmV0IjoiQU9DX1NFU1NJT04iLCJ5ZWFyIjoiMjAyNCJ9","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "20", System.fetch_env!("LB_AOC_SESSION"))
```

## Parser

### Code - Parser

```elixir
defmodule Parser do
  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.with_index()
    |> Enum.flat_map(fn {line, y} ->
      line
      |> String.graphemes()
      |> Enum.with_index()
      |> Enum.filter(fn {char, _} -> char != "#" end)
      |> Enum.map(fn {char, x} -> {{x, y}, char} end)
    end)
    |> Map.new()
  end
end
```

### Tests - Parser

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
  #####
  #S.E#
  #####
  """
  @expected %{{1, 1} => "S", {2, 1} => ".", {3, 1} => "E"}

  test "parse test" do
    actual = parse(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

## Shared

```elixir
defmodule Shared do
  def cheat([], _, _), do: 0

  def cheat([{{sx, sy}, from} | others], cheat_time, at_least_save) do
    found_cheat =
      others
      |> Enum.filter(fn {{dx, dy}, to} ->
        manhattan_dist = abs(sx - dx) + abs(sy - dy)
        default_dist = to - from

        if manhattan_dist > cheat_time or default_dist <= cheat_time do
          false
        else
          time_saved = default_dist - manhattan_dist
          time_saved >= at_least_save
        end
      end)
      |> Enum.count()

    found_cheat + cheat(others, cheat_time, at_least_save)
  end

  def path(map) do
    {start, _} = map |> Enum.find(fn {_, char} -> char == "S" end)

    1..(Enum.count(map) - 1)
    |> Enum.reduce([start], fn _, track = [{x, y} | _] ->
      [{1, 0}, {0, -1}, {-1, 0}, {0, 1}]
      |> Enum.map(fn {dx, dy} -> {x + dx, y + dy} end)
      |> Enum.find(fn next ->
        Map.has_key?(map, next) and !Enum.member?(track, next)
      end)
      |> then(fn next -> [next | track] end)
    end)
    |> Enum.reverse()
    |> Enum.with_index()
  end
end
```

<!-- livebook:{"branch_parent_index":2} -->

## Part One

### Code - Part 1

```elixir
defmodule PartOne do
  import Shared

  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input, cheat_time \\ 2, at_least_save \\ 100) do
    input
      |> Parser.parse()
      |> path()
      |> cheat(cheat_time, at_least_save)  
  end
end
```

### Tests - Part 1

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @input """
  ###############
  #...#...#.....#
  #.#.#.#.#.###.#
  #S#...#.#.#...#
  #######.#.#.###
  #######.#.#...#
  #######.#.###.#
  ###..E#...#...#
  ###.#######.###
  #...###...#...#
  #.#####.#.###.#
  #.#...#.#.#...#
  #.#.#.#.#.#.###
  #...#...#...###
  ###############
  """
  @expected 1

  test "part one" do
    actual = run(@input, 2, 64)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 1

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Part Two

### Code - Part 2

```elixir
defmodule PartTwo do
  import Shared

  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

def run(input, cheat_time \\ 20, at_least_save \\ 100) do
    input
      |> Parser.parse()
      |> path()
      |> cheat(cheat_time, at_least_save)  
  end
end
```

### Tests - Part 2

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input """
  ###############
  #...#...#.....#
  #.#.#.#.#.###.#
  #S#...#.#.#...#
  #######.#.#.###
  #######.#.#...#
  #######.#.###.#
  ###..E#...#...#
  ###.#######.###
  #...###...#...#
  #.#####.#.###.#
  #.#...#.#.#...#
  #.#.#.#.#.#.###
  #...#...#...###
  ###############
  """
  @expected 3

  test "part two" do
    actual = run(@input, 20, 76)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 2

```elixir
PartTwo.solve(puzzle_input)
```

<!-- livebook:{"offset":4360,"stamp":{"token":"XCP.cnx_S3ojOQ21Br9Y9__0zTMInIR1Uai0_BJlq4cR3JUH3dRgJyQ6zBuPBEi8R0W8NIY-hgYaISkvGwbUpiA9OgnU2RAupN3a6F8JdeYeaYB1zz2VZpA","version":2}} -->
