# Advent of Code 2024 - Day 03

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.7"}
])
```

## Introduction

[2024 - Day 03](https://adventofcode.com/2024/day/3)

## Puzzle

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIzIiwic2Vzc2lvbl9zZWNyZXQiOiJBT0NfU0VTU0lPTiIsInllYXIiOiIyMDI0In0","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "3", System.fetch_env!("LB_AOC_SESSION"))
```

## Parser

### Code - Parser

```elixir
defmodule Parser do
  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.join("")
  end
end
```

### Tests - Parser

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
  ]sel
  #-#$
  """
  @expected "]sel#-#$"

  test "parse test" do
    actual = parse(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

<!-- livebook:{"branch_parent_index":2} -->

## Part One

### Code - Part 1

```elixir
defmodule PartOne do
  @reg ~r/mul\((\d+),(\d+)\)/
  
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> Parser.parse()
    |> then(fn line ->
      Regex.scan(@reg, line)
      |> Enum.map(fn [_, a, b] ->
        a = String.to_integer(a)
        b = String.to_integer(b)
        a * b
      end)
      |> Enum.sum()
    end)
  end
end
```

### Tests - Part 1

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @input "xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))"
  @expected 161

  test "part one" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 1

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Part Two

### Code - Part 2

```elixir
defmodule PartTwo do
  @reg ~r/do\(\)|don't\(\)|mul\((\d+),(\d+)\)/
  
  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> Parser.parse()
    |> then(fn line ->
      Regex.scan(@reg, line)
      |> Enum.reduce({:do, 0}, fn 
        ["do()"], {_, sum} -> {:do, sum}
        ["don't()"], {_, sum} -> {:dont, sum}
        [_, _, _], {:dont, sum} -> {:dont, sum}
        [_, a, b], {:do, sum} -> 
          a = String.to_integer(a)
          b = String.to_integer(b)
          {:do, sum + a * b}
      end)
    end)
    |> elem(1)
  end
end
```

### Tests - Part 2

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input "xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))"
  @expected 48

  test "part two" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 2

```elixir
PartTwo.solve(puzzle_input)
```

<!-- livebook:{"offset":3010,"stamp":{"token":"XCP.CRd1RxsNxe5QVE1rWDLzk7WgpSg2cxJgE1hQXFosDtnzF9u99IpXegkyzeBpSaZuwj8Wkh_sdrjssfxhvA3FI38LLAFnPha3mKKxqa5j3qX1mKWaYkE","version":2}} -->
