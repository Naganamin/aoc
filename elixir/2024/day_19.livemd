# Advent of Code 2024 - Day 19

```elixir
Mix.install([
  :kino_aoc,
  :memoize
])
```

## Introduction

[2024 - Day 19](https://adventofcode.com/2024/day/19)

## Puzzle

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIxOSIsInNlc3Npb25fc2VjcmV0IjoiQU9DX1NFU1NJT04iLCJ5ZWFyIjoiMjAyNCJ9","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "19", System.fetch_env!("LB_AOC_SESSION"))
```

## Parser

### Code - Parser

```elixir
defmodule Parser do
  def parse(input) do
    [towel | designs] =
      input
      |> String.split("\n", trim: true)
    {String.split(towel, ", "), designs}
  end
end
```

### Tests - Parser

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
  r, wr, b, g

  brwrr
  bggr
  """
  @expected {["r", "wr", "b", "g"], ["brwrr", "bggr"]}

  test "parse test" do
    actual = parse(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

## Shared

```elixir
defmodule Shared do
  use Memoize
  
  defmemo check(designs, towel) do
    if towel == "" do
      1
    else
      next =
        designs
        |> Enum.filter(fn design -> String.starts_with?(towel, design) end)
        |> Enum.map(fn design -> String.replace_prefix(towel, design, "") end)

      case next do
        [] ->
          0

        next ->
          next
          |> Enum.reduce(0, fn towel, result ->
            result + check(designs, towel)
          end)
      end
    end
  end
end
```

<!-- livebook:{"branch_parent_index":2} -->

## Part One

### Code - Part 1

```elixir
defmodule PartOne do
  import Shared

  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    {designs, towels} = Parser.parse(input)

    towels
    |> Enum.count(fn towel -> check(designs, towel) > 0 end)
  end
end
```

### Tests - Part 1

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @input """
  r, wr, b, g, bwu, rb, gb, br

  brwrr
  bggr
  gbbr
  rrbgbr
  ubwu
  bwurrg
  brgr
  bbrgwb
  """
  @expected 6

  test "part one" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 1

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Part Two

### Code - Part 2

```elixir
defmodule PartTwo do
  import Shared

  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    {designs, towels} = Parser.parse(input)

    towels
    |> Enum.map(fn towel -> check(designs, towel) end)
    |> Enum.sum()
  end
end
```

### Tests - Part 2

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input """
  r, wr, b, g, bwu, rb, gb, br

  brwrr
  bggr
  gbbr
  rrbgbr
  ubwu
  bwurrg
  brgr
  bbrgwb
  """
  @expected 16

  test "part two" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 2

```elixir
PartTwo.solve(puzzle_input)
```

<!-- livebook:{"offset":3235,"stamp":{"token":"XCP.bv7WnXPUB14MyXCDZQNXMdX18nOr0u4w-vv-TmFd0izOUzbjsW5e5z2H4M__7FRxvPjq5S1ksJEy-dqDNHGAwKYoIlYqQTYt_OwBoUToqJhVtq_0hy4","version":2}} -->
