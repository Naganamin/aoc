# Advent of Code 2024 - Day 01

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.7"}
])
```

## Introduction

[2024 - Day 01](https://adventofcode.com/2024/day/1)

## Puzzle

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "1", System.fetch_env!("LB_AOC_SESSION"))
```

## Parser

### Code - Parser

```elixir
defmodule Parser do
  @reg ~r/\s+/

  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn s ->
      s
      |> String.split(@reg)
      |> Enum.map(&(String.to_integer/1))
    end)
  end
end
```

### Tests - Parser

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
         5   9
         4   6
         """
  @expected [[5, 9], [4, 6]]

  test "parse test" do
    actual = parse(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

<!-- livebook:{"branch_parent_index":2} -->

## Part One

### Code - Part 1

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> Parser.parse()
    |> Enum.reduce([[], []], fn [l, r], [ll, rl] ->
      [[l | ll], [r | rl]]
    end)
    |> Enum.map(&Enum.sort/1)
    |> Enum.zip()
    |> Enum.map(fn {a, b} -> abs(a - b) end)
    |> Enum.sum()
  end
end
```

### Tests - Part 1

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @input """
         3   4
         4   3
         2   5
         1   3
         3   9
         3   3
         """
  @expected 11

  test "part one" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 1

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Part Two

### Code - Part 2

```elixir
defmodule PartTwo do
  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    [list, dict] =
      input
      |> Parser.parse()
      |> Enum.reduce([[], []], fn [l, r], [ll, rl] ->
        [[l | ll], [r | rl]]
      end)
      |> then(fn [ll, rr] -> [ll, Enum.frequencies(rr)] end)

    list
    |> Enum.map(&(&1 * Map.get(dict, &1, 0)))
    |> Enum.sum()
  end
end
```

### Tests - Part 2

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input """
         3   4
         4   3
         2   5
         1   3
         3   9
         3   3
         """
  @expected 31

  test "part two" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 2

```elixir
PartTwo.solve(puzzle_input)
```

<!-- livebook:{"offset":2746,"stamp":{"token":"XCP.OWXZ4nleWb7vLNj3ShCLIi5EhKYN0HRQgAKATIupfas5SppKDAZLeMq73CURtG6O_swfXS5_Ru3LqvA_-K-MQWlOVnA958nAzv0qpbjL6t8tHNCI3Ho","version":2}} -->
