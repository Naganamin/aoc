# Advent of Code 2024 - Day 02

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.7"}
])
```

## Introduction

[2024 - Day 02](https://adventofcode.com/2024/day/2)

## Puzzle

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "2", System.fetch_env!("LB_AOC_SESSION"))
```

## Parser

### Code - Parser

```elixir
defmodule Parser do
  @reg ~r/\s+/

  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn s ->
      s
      |> String.split(@reg)
      |> Enum.map(&(String.to_integer/1))
    end)
  end
end
```

### Tests - Parser

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
  7 6 4 2 1
  1 2 7 8 9
  """
  @expected [[7, 6, 4, 2, 1], [1, 2, 7, 8, 9]]

  test "parse test" do
    actual = parse(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

## Shared

```elixir
defmodule Shared do
  def is_safe(report) do
    report
    |> Enum.chunk_every(2, 1, :discard)
    |> Enum.reduce_while(nil, fn [a, b], prev_level ->
      level = a - b

      cond do
        abs(level) < 1 or abs(level) > 3 -> {:halt, false}
        prev_level != nil and sign(prev_level) != sign(level) -> {:halt, false}
        true -> {:cont, level}
      end
    end)
  end

  defp sign(x) when x > 0, do: "+"
  defp sign(x) when x < 0, do: "-"
end
```

<!-- livebook:{"branch_parent_index":2} -->

## Part One

### Code - Part 1

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> Parser.parse()
    |> Enum.count(&Shared.is_safe/1)
  end
end
```

### Tests - Part 1

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @input """
  7 6 4 2 1
  1 2 7 8 9
  9 7 6 2 1
  1 3 2 4 5
  8 6 4 4 1
  1 3 6 7 9
  """
  @expected 2

  test "part one" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 1

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Part Two

### Code - Part 2

```elixir
defmodule PartTwo do
  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> Parser.parse()
    |> Enum.count(&is_safe/1)
  end

  defp is_safe(report) do
    Enum.count(report)..0
    |> Enum.any?(fn i ->
      report
      |> List.delete_at(i)
      |> Shared.is_safe()
    end)
  end
end
```

### Tests - Part 2

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input """
  7 6 4 2 1
  1 2 7 8 9
  9 7 6 2 1
  1 3 2 4 5
  8 6 4 4 1
  1 3 6 7 9
  """
  @expected 4

  test "part two" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 2

```elixir
PartTwo.solve(puzzle_input)
```

<!-- livebook:{"offset":2967,"stamp":{"token":"XCP.L9vs2X3lGnmgHdor8Tit31oVEtgB74RqPnPIfJVAk42FjeYliVGw5q5IeoJeaVznlnIVSqnJzIYguSurTznVvGYmU3nKJvXkExu4zCft6JDNRKGONg8","version":2}} -->
